#BlueJ class context
comment0.params=
comment0.target=MillGame()
comment0.text=\r\n\ \r\n\ Variable\ initialization.\r\n
comment1.params=
comment1.target=void\ reset()
comment1.text=\r\n\ resets\ game\ to\ initial\ values\r\n
comment10.params=x\ y\ color
comment10.target=Piece\ selectPiece(int,\ int,\ java.lang.String)
comment10.text=\r\n\ Returns\ a\ piece\ selected\ from\ the\ board.\ The\ piece\ is\ selected\ through\ the\ parameters\ x\ ,\ y.\ You\ must\ also\ specify\ the\ color\ for\ validation\r\n
comment11.params=x\ y\ selected
comment11.target=Piece\ moveTo(int,\ int,\ Piece)
comment11.text=\r\n\ Method\ used\ to\ move\ a\ piece\ from\ one\ location\ to\ a\ neighboring\ one\ on\ the\ board.\r\n
comment12.params=x\ y\ selected
comment12.target=Piece\ jumpTo(int,\ int,\ Piece)
comment12.text=\r\n\ Method\ used\ in\ last\ Phase,\ when\ a\ player\ has\ exactly\ 3\ pieces\ for\ jumping\ a\ Piece\ from\ a\ position\ to\ any\ other\ free\ position\ on\ the\ board\r\n
comment13.params=
comment13.target=java.lang.String\ setGameOver()
comment13.text=\r\n\ return\ "GAME\ OVER"\ if\ a\ player\ has\ 2\ pieces\ left\ and\ "Game\ in\ progres"\ otherwise\r\n
comment14.params=x\ y
comment14.target=void\ detectAction(int,\ int)
comment14.text=dectectAction\ is\ the\ main\ acting\ method\ of\ the\ class\ (detect\ &\ action).\ It\ detects\ the\ game\ phase\ and\ Acts\ accordingly.\ The\ input\ parameters\ x\ and\ y\ are\ board(game\ matrix)\ coordinates,\ recieved\ from\ the\ control.\r\n\ It\ ties\ all\ the\ precedent\ methods\ together\ to\ form\ a\ whole\ program.\r\n
comment2.params=
comment2.target=java.lang.String\ toString()
comment2.text=\r\ntoString()\ returns\ the\ board\ matrix\ in\ string\ form.\r\n
comment3.params=
comment3.target=java.lang.String\ leftToPut()
comment3.text=\r\n\ returns\ a\ String\ that\ contains\ the\ number\ of\ white\ and\ black\ pieces\ left\ to\ put\ on\ the\ board.\r\n
comment4.params=color
comment4.target=boolean\ possibleMoves(java.lang.String)
comment4.text=\r\n\ Verifies\ if\ a\ player\ has\ any\ possible\ moves\r\n
comment5.params=x\ y
comment5.target=boolean\ isValid(int,\ int)
comment5.text=\r\n\ isValid\ is\ a\ method\ used\ to\ check\ if\ the\ selected\ positon\ is\ on\ the\ board.\ \r\n
comment6.params=n
comment6.target=boolean\ formedMill(Piece)
comment6.text=\r\n\ After\ we\ moved\ a\ piece,\ we\ check\ if\ that\ piece\ forms\ a\ mill.\r\n
comment7.params=color
comment7.target=boolean\ freePiece(java.lang.String)
comment7.text=\r\n\ This\ checks\ if\ there\ are\ any\ pieces\ that\ don't\ form\ a\ Mill\ so\ that\ they\ may\ be\ eaten.\r\n\ \r\n
comment8.params=x\ y\ color
comment8.target=Piece\ addPiece(int,\ int,\ java.lang.String)
comment8.text=\r\n\ This\ method\ is\ used\ to\ add\ a\ piece\ to\ the\ board,\ using\ board\ coordinates\ X\ and\ Y\ and\ piece\ Color.It\ returns\ the\ added\ piece.\r\n\ \r\n
comment9.params=x\ y\ color
comment9.target=void\ eatPiece(int,\ int,\ java.lang.String)
comment9.text=\r\n\ The\ scope\ of\ this\ method\ is\ to\ eat\ pieces\ from\ the\ board.\ It\ should\ be\ used\ when\ a\ mill\ is\ formed.\ The\ piece\ to\ be\ eaten\ is\ chosen\ using\ it's\ x\ and\ y\ coordinates.\ The\ piece\ color\ is\ transmited\ as\ parameter\ only\ for\ validation.\r\n
numComments=15
